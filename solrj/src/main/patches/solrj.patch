Index: org/apache/solr/client/solrj/response/FieldCollapseResponse.java
===================================================================
--- org/apache/solr/client/solrj/response/FieldCollapseResponse.java	(revision 0)
+++ org/apache/solr/client/solrj/response/FieldCollapseResponse.java	(revision 0)
@@ -0,0 +1,172 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.client.solrj.response;
+
+import org.apache.solr.common.SolrDocumentList;
+import org.apache.solr.common.util.NamedList;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Represents the fieldcollapse part of the response.
+ * This class encapsulates the following information:
+ * <ul>
+ *  <li> What field was used during field collapsing.
+ *  <li> A list of collapse groups.
+ * </ul>
+ */
+public class FieldCollapseResponse {
+
+  private final String collapseField;
+  private final List<CollapseGroup> collapseGroups;
+
+  /**
+   * Constructs a <code>FieldCollapseResponse</code> instance.
+   *
+   * @param collapseInfo The field collapse part of the response. From the namelist <i>collapse_counts</i>
+   */
+  public FieldCollapseResponse(NamedList<Object> collapseInfo) {
+    this.collapseField = (String) collapseInfo.get("field");
+
+    NamedList collapseResult = (NamedList) collapseInfo.get("results");
+    collapseGroups = new ArrayList<CollapseGroup>(collapseResult.size());
+    for (int i = 0; i < collapseResult.size(); i++) {
+      String collapseGroupId = collapseResult.getName(i);
+      NamedList collapseGroupResult = (NamedList) collapseResult.get(collapseGroupId);
+      collapseGroups.add(new CollapseGroup(collapseGroupId, collapseGroupResult));
+    }
+  }
+
+  /**
+   * Returns the field name that was used during collapsing.
+   *
+   * @return the field name that was used during collapsing
+   */
+  public String getCollapseField() {
+    return collapseField;
+  }
+
+  /**
+   * Returns the collapse groups that were created during field collapsing.
+   * Each group contains statistics about the collapsed documents (like collapse count).
+   *
+   * @return the collapse groups that were created during field collapsing
+   */
+  public List<CollapseGroup> getCollapseGroups() {
+    return collapseGroups;
+  }
+
+
+  // ================================================= Inner classes =================================================
+
+  /**
+   * Represents a collapse group. A collapse group is a logical group where documents are collaped into.
+   * Currenly a collapse group can contain the following information:
+   * <ul>
+   *  <li> The unique identifier of the collapse group.
+   *  <li> The field value of the most relevant document.
+   *  <li> The collapse count. The number of documents that were collapsed under the most relevant document.
+   *  <li> The collapsed documents. The actual collapsed documents.
+   * </ul>
+   */
+  public class CollapseGroup {
+
+    private final String collapseGroupId;
+    private final String fieldValue;
+    private final Integer collapseCount;
+    private final SolrDocumentList collapsedDocuments;
+    private final Map<String, String> aggregateFunctions = new HashMap<String, String>();
+
+    /**
+     * Constructs a collapse group with the specified parameters.
+     *
+     * @param collapseGroupId The unique identifier of the collapse group (most relevant document of group)
+     * @param collapseGroupResult The associated group data
+     */
+    public CollapseGroup(String collapseGroupId, NamedList collapseGroupResult) {
+      this.collapseGroupId = collapseGroupId;
+      this.fieldValue = (String) collapseGroupResult.get("fieldValue");
+      this.collapseCount = (Integer) collapseGroupResult.get("collapseCount");
+      this.collapsedDocuments = (SolrDocumentList) collapseGroupResult.get("collapsedDocs");
+
+      NamedList aggregateFunctionsData = (NamedList) collapseGroupResult.get("aggregate");
+      if (aggregateFunctionsData == null) {
+        return;
+      }
+
+      for (int i = 0; i < aggregateFunctionsData.size(); i++) {
+        String functionName = aggregateFunctionsData.getName(i);
+        String functionResult = (String) aggregateFunctionsData.get(functionName);
+        aggregateFunctions.put(functionName, functionResult);
+      }
+    }
+
+    /**
+     * Returns the unique identifier of the group.
+     * This is the most relevant document of the group (documents with a common field value) and thus was not collapsed.
+     *
+     * @return the unique identifier of the group
+     */
+    public String getCollapseGroupId() {
+      return collapseGroupId;
+    }
+
+    /**
+     * Returns the field value of the most relevant document of the group for the collapse field.
+     *
+     * @return the field value of the most relevant document of the group for the collapse field
+     */
+    public String getFieldValue() {
+      return fieldValue;
+    }
+
+    /**
+     * Returns the number of documents that were collapsed under this collapse group.
+     *
+     * @return the number of documents that were collapsed under this collapse group.
+     */
+    public int getCollapseCount() {
+      return collapseCount;
+    }
+
+    /**
+     * Returns all collapsed document as <code>SolrDocumentList</code> for this collapse group.
+     *
+     * Returns <code>null</code> when no documents were collapsed or the inclusion of collapsed documents
+     * was not specified in the request
+     *
+     * @return all collapsed documents per field value
+     */
+    public SolrDocumentList getCollapsedDocuments() {
+      return collapsedDocuments;
+    }
+
+    /**
+     * Return the aggregate function results. The key represents the function name and value the function result. 
+     *
+     * @return the aggregate function results
+     */
+    public Map<String, String> getAggregateFunctions() {
+      return aggregateFunctions;
+    }
+  }
+
+}
Index: org/apache/solr/client/solrj/response/QueryResponse.java
===================================================================
--- org/apache/solr/client/solrj/response/QueryResponse.java	(revision 885060)
+++ org/apache/solr/client/solrj/response/QueryResponse.java	(working copy)
@@ -17,18 +17,13 @@
 
 package org.apache.solr.client.solrj.response;
 
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-
+import org.apache.solr.client.solrj.SolrServer;
+import org.apache.solr.client.solrj.beans.DocumentObjectBinder;
 import org.apache.solr.common.SolrDocumentList;
 import org.apache.solr.common.util.NamedList;
-import org.apache.solr.client.solrj.SolrServer;
-import org.apache.solr.client.solrj.beans.DocumentObjectBinder;
 
+import java.util.*;
+
 /**
  * 
  * @version $Id$
@@ -46,6 +41,7 @@
   private NamedList<Object> _highlightingInfo = null;
   private NamedList<Object> _spellInfo = null;
   private NamedList<Object> _statsInfo = null;
+  private NamedList<Object> _collapseInfo = null;
 
   // Facet stuff
   private Map<String,Integer> _facetQuery = null;
@@ -59,6 +55,9 @@
   // SpellCheck Response
   private SpellCheckResponse _spellResponse = null;
 
+  // Field collapse response
+  private FieldCollapseResponse _fieldCollapseResponse = null;  
+
   // Field stats Response
   private Map<String,FieldStatsInfo> _fieldStatsInfo = null;
   
@@ -118,9 +117,17 @@
         _statsInfo = (NamedList<Object>) res.getVal( i );
         extractStatsInfo( _statsInfo );
       }
+      else if ("collapse_counts".equals(n)) {
+        _collapseInfo = (NamedList<Object>) res.getVal(i);
+        extractFieldCollapseInfo(_collapseInfo);
+      }  
     }
   }
 
+  private void extractFieldCollapseInfo(NamedList<Object> collapseInfo) {
+    _fieldCollapseResponse = new FieldCollapseResponse(collapseInfo);
+  }  
+
   private void extractSpellCheckInfo(NamedList<Object> spellInfo) {
     _spellResponse = new SpellCheckResponse(spellInfo);
   }
@@ -178,10 +185,8 @@
     // Parse the queries
     _facetQuery = new HashMap<String, Integer>();
     NamedList<Integer> fq = (NamedList<Integer>) info.get( "facet_queries" );
-    if (fq != null) {
-      for( Map.Entry<String, Integer> entry : fq ) {
-        _facetQuery.put( entry.getKey(), entry.getValue() );
-      }
+    for( Map.Entry<String, Integer> entry : fq ) {
+      _facetQuery.put( entry.getKey(), entry.getValue() );
     }
     
     // Parse the facet info into fields
@@ -276,6 +281,10 @@
     return _spellResponse;
   }
 
+  public FieldCollapseResponse getFieldCollapseResponse() {
+    return _fieldCollapseResponse;
+  }
+
   /**
    * See also: {@link #getLimitingFacets()}
    */
Index: org/apache/solr/client/solrj/SolrQuery.java
===================================================================
--- org/apache/solr/client/solrj/SolrQuery.java	(revision 885060)
+++ org/apache/solr/client/solrj/SolrQuery.java	(working copy)
@@ -17,11 +17,7 @@
 
 package org.apache.solr.client.solrj;
 
-import org.apache.solr.common.params.CommonParams;
-import org.apache.solr.common.params.FacetParams;
-import org.apache.solr.common.params.HighlightParams;
-import org.apache.solr.common.params.ModifiableSolrParams;
-import org.apache.solr.common.params.StatsParams;
+import org.apache.solr.common.params.*;
 
 
 /**
@@ -571,6 +567,60 @@
     return this.getInt(CommonParams.TIME_ALLOWED);
   }
 
+  /**
+   * Enables field collapsing for the current query with the specified field.
+   *
+   * @param field The field to collapse on
+   * @return the updated SolrQuery
+   */
+  public SolrQuery enableFieldCollapsing(String field) {
+    add(CollapseParams.COLLAPSE_FIELD, field);
+    return this;
+  }
+
+  /**
+   * Enables the inclusion of collapsed documents in the response. The fields parameter specify what fields are returned
+   * from the collasped documents. The fewer fields to return the better the performance is. When the argument specified
+   * is <code>null</code> or empty all fields will be returned. 
+   *
+   * @param fields The fields to return for collapsed documents. If <code>null</code> or empty all fields are returned.
+   * @return the updated SolrQuery
+   */
+  public SolrQuery includeCollapsedDocuments(String... fields) {
+    if (fields == null || fields.length < 1) {
+      add(CollapseParams.COLLAPSE_INCLUDE_COLLAPSED_DOCS_FIELDS, "*");
+      return this;
+    }
+
+    StringBuilder fl = new StringBuilder();
+    for (int i = 0; i < fields.length; i++) {
+      fl.append(fields[i]);
+      if (i + 1 < fields.length) {
+        fl.append(',');
+      }
+    }
+    add(CollapseParams.COLLAPSE_INCLUDE_COLLAPSED_DOCS_FIELDS, fl.toString());
+    return this;
+  }
+
+  /**
+   * Enabled the execution of aggregate functions on the collapsed documents.
+   *
+   * @param functions The functions to execute
+   * @return the updated SolrQuery
+   */
+  public SolrQuery aggregateFunctions(String... functions) {
+    StringBuilder fl = new StringBuilder();
+    for (int i = 0; i < functions.length; i++) {
+      fl.append(functions[i]);
+      if (i + 1 < functions.length) {
+        fl.append(',');
+      }
+    }
+    add(CollapseParams.COLLAPSE_AGGREGATE, fl.toString());
+    return this;
+  }
+
   ///////////////////////
   //  Utility functions
   ///////////////////////
